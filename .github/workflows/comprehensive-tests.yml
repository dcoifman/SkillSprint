name: Comprehensive Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Limit concurrent runs of this workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Lint check
      run: npm run lint
      
    - name: Type check
      run: npm run typecheck
      
    - name: Format check
      run: npm run format:check
      
    - name: Check for circular dependencies
      run: npx madge --circular ./src
  
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Run unit tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests
    services:
      supabase:
        image: supabase/postgres:15.1.0.117
        ports:
          - 54322:5432
        env:
          POSTGRES_PASSWORD: postgres
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Run database migrations
      run: npm run db:migrate
      env:
        SUPABASE_URL: http://localhost:54322
        SUPABASE_ANON_KEY: test-anon-key
      
    - name: Run integration tests
      run: npm run test:integration
      env:
        SUPABASE_URL: http://localhost:54322
        SUPABASE_ANON_KEY: test-anon-key
        
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: integration-tests
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          ~/.cache/ms-playwright
        key: npm-playwright-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          npm-playwright-
          npm-
    
    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps
        npx playwright install --with-deps
    
    - name: Build project
      run: npm run build
      
    - name: Cache build
      uses: actions/cache@v3
      with:
        path: build
        key: build-${{ github.sha }}
    
    - name: Start local server
      run: npm run start & npx wait-on http://localhost:3000
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: playwright-report/
        
  accessibility:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: e2e-tests
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Build project
      run: npm run build
      
    - name: Run accessibility tests
      run: |
        npx @axe-core/cli@4.8.5
        npm run start & npx wait-on http://localhost:3000
        npx axe http://localhost:3000 --exit
        
  performance:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: accessibility
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Build project
      run: npm run build
      
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.13.x
        npm run start & npx wait-on http://localhost:3000
        lhci autorun
        
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: performance
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Run security audit
      run: npm audit --production
      
    - name: Run SAST scan
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
  visual-regression:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: security
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
        
    - name: Build Storybook
      run: npm run build-storybook
      
    - name: Run visual regression tests
      run: npm run test:visual-regression
      
    - name: Upload visual regression results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: visual-regression-report
        path: .reg 