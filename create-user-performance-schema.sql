-- Schema for user performance tracking and personalized learning paths

-- User progress tracking for completed sprints
CREATE TABLE IF NOT EXISTS public.user_sprint_progress (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  sprint_id UUID NOT NULL REFERENCES public.sprints(id) ON DELETE CASCADE,
  module_id UUID NOT NULL REFERENCES public.modules(id) ON DELETE CASCADE,
  path_id UUID NOT NULL REFERENCES public.learning_paths(id) ON DELETE CASCADE,
  completed_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  time_spent_seconds INTEGER,
  score INTEGER,
  attempts INTEGER DEFAULT 1,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  UNIQUE(user_id, sprint_id)
);

-- Quiz results to track specific knowledge areas
CREATE TABLE IF NOT EXISTS public.user_quiz_results (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  sprint_id UUID NOT NULL REFERENCES public.sprints(id) ON DELETE CASCADE,
  question_index INTEGER NOT NULL,
  correct BOOLEAN NOT NULL,
  response_time_seconds INTEGER,
  attempt_number INTEGER DEFAULT 1,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  UNIQUE(user_id, sprint_id, question_index, attempt_number)
);

-- Knowledge area strengths and weaknesses
CREATE TABLE IF NOT EXISTS public.knowledge_areas (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  parent_area_id UUID REFERENCES public.knowledge_areas(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Sprint to knowledge area mapping
CREATE TABLE IF NOT EXISTS public.sprint_knowledge_mapping (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  sprint_id UUID NOT NULL REFERENCES public.sprints(id) ON DELETE CASCADE,
  knowledge_area_id UUID NOT NULL REFERENCES public.knowledge_areas(id) ON DELETE CASCADE,
  weight FLOAT NOT NULL DEFAULT 1.0, -- How much this sprint contributes to the knowledge area
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  UNIQUE(sprint_id, knowledge_area_id)
);

-- User knowledge proficiency
CREATE TABLE IF NOT EXISTS public.user_knowledge_proficiency (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  knowledge_area_id UUID NOT NULL REFERENCES public.knowledge_areas(id) ON DELETE CASCADE,
  proficiency_score FLOAT NOT NULL DEFAULT 0.0, -- 0.0 to 1.0 scale
  confidence_level FLOAT NOT NULL DEFAULT 0.5, -- 0.0 to 1.0 scale (system confidence in this score)
  last_assessed_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  UNIQUE(user_id, knowledge_area_id)
);

-- Personalized learning paths
CREATE TABLE IF NOT EXISTS public.personalized_learning_paths (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  base_path_id UUID REFERENCES public.learning_paths(id) ON DELETE SET NULL,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Personalized learning path modules (can be reordered based on user needs)
CREATE TABLE IF NOT EXISTS public.personalized_modules (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  personalized_path_id UUID NOT NULL REFERENCES public.personalized_learning_paths(id) ON DELETE CASCADE,
  original_module_id UUID REFERENCES public.modules(id) ON DELETE SET NULL,
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  order_index INTEGER NOT NULL,
  is_custom BOOLEAN DEFAULT false, -- true if this is a custom module not in the original path
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Personalized sprints (can be reordered, customized or generated)
CREATE TABLE IF NOT EXISTS public.personalized_sprints (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  personalized_module_id UUID NOT NULL REFERENCES public.personalized_modules(id) ON DELETE CASCADE,
  original_sprint_id UUID REFERENCES public.sprints(id) ON DELETE SET NULL,
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  time TEXT NOT NULL,
  order_index INTEGER NOT NULL,
  content TEXT,
  is_custom BOOLEAN DEFAULT false, -- true if this is a custom sprint not in the original path
  is_generated BOOLEAN DEFAULT false, -- true if generated by AI
  knowledge_area_focus UUID REFERENCES public.knowledge_areas(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- AI-generated quiz questions for personalized sprints
CREATE TABLE IF NOT EXISTS public.personalized_quiz_questions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  personalized_sprint_id UUID NOT NULL REFERENCES public.personalized_sprints(id) ON DELETE CASCADE,
  question TEXT NOT NULL,
  options JSONB NOT NULL, -- Array of options
  correct_answer INTEGER NOT NULL, -- Index of correct option
  explanation TEXT, -- Explanation of the answer
  difficulty_level INTEGER DEFAULT 2, -- 1-5 scale
  knowledge_area_id UUID REFERENCES public.knowledge_areas(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Enable RLS on all tables
ALTER TABLE public.user_sprint_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_quiz_results ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.knowledge_areas ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sprint_knowledge_mapping ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_knowledge_proficiency ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.personalized_learning_paths ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.personalized_modules ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.personalized_sprints ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.personalized_quiz_questions ENABLE ROW LEVEL SECURITY;

-- Create policies for user-specific data
CREATE POLICY "Users can view their own progress" 
  ON public.user_sprint_progress
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own progress" 
  ON public.user_sprint_progress
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own progress" 
  ON public.user_sprint_progress
  FOR UPDATE
  USING (auth.uid() = user_id);

-- Similar policies for quiz results
CREATE POLICY "Users can view their own quiz results" 
  ON public.user_quiz_results
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own quiz results" 
  ON public.user_quiz_results
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

-- Knowledge areas accessible to all
CREATE POLICY "Anyone can view knowledge areas" 
  ON public.knowledge_areas
  FOR SELECT 
  USING (true);

-- Sprint to knowledge mapping accessible to all
CREATE POLICY "Anyone can view sprint knowledge mappings" 
  ON public.sprint_knowledge_mapping
  FOR SELECT 
  USING (true);

-- User knowledge proficiency policies
CREATE POLICY "Users can view their own knowledge proficiency" 
  ON public.user_knowledge_proficiency
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can update their own knowledge proficiency" 
  ON public.user_knowledge_proficiency
  FOR ALL
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- Personalized learning path policies
CREATE POLICY "Users can manage their personalized learning paths" 
  ON public.personalized_learning_paths
  FOR ALL
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can manage their personalized modules" 
  ON public.personalized_modules
  FOR ALL
  USING (EXISTS (
    SELECT 1 FROM public.personalized_learning_paths plp
    WHERE plp.id = personalized_path_id AND plp.user_id = auth.uid()
  ))
  WITH CHECK (EXISTS (
    SELECT 1 FROM public.personalized_learning_paths plp
    WHERE plp.id = personalized_path_id AND plp.user_id = auth.uid()
  ));

CREATE POLICY "Users can manage their personalized sprints" 
  ON public.personalized_sprints
  FOR ALL
  USING (EXISTS (
    SELECT 1 FROM public.personalized_modules pm
    JOIN public.personalized_learning_paths plp ON pm.personalized_path_id = plp.id
    WHERE pm.id = personalized_module_id AND plp.user_id = auth.uid()
  ))
  WITH CHECK (EXISTS (
    SELECT 1 FROM public.personalized_modules pm
    JOIN public.personalized_learning_paths plp ON pm.personalized_path_id = plp.id
    WHERE pm.id = personalized_module_id AND plp.user_id = auth.uid()
  ));

CREATE POLICY "Users can view their personalized quiz questions" 
  ON public.personalized_quiz_questions
  FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM public.personalized_sprints ps
    JOIN public.personalized_modules pm ON ps.personalized_module_id = pm.id
    JOIN public.personalized_learning_paths plp ON pm.personalized_path_id = plp.id
    WHERE ps.id = personalized_sprint_id AND plp.user_id = auth.uid()
  ));

-- Create indexes for faster lookups
CREATE INDEX IF NOT EXISTS idx_user_sprint_progress_user ON public.user_sprint_progress (user_id);
CREATE INDEX IF NOT EXISTS idx_user_sprint_progress_sprint ON public.user_sprint_progress (sprint_id);
CREATE INDEX IF NOT EXISTS idx_user_quiz_results_user ON public.user_quiz_results (user_id);
CREATE INDEX IF NOT EXISTS idx_user_quiz_results_sprint ON public.user_quiz_results (sprint_id);
CREATE INDEX IF NOT EXISTS idx_knowledge_areas_parent ON public.knowledge_areas (parent_area_id);
CREATE INDEX IF NOT EXISTS idx_sprint_knowledge_mapping_sprint ON public.sprint_knowledge_mapping (sprint_id);
CREATE INDEX IF NOT EXISTS idx_sprint_knowledge_mapping_area ON public.sprint_knowledge_mapping (knowledge_area_id);
CREATE INDEX IF NOT EXISTS idx_user_knowledge_proficiency_user ON public.user_knowledge_proficiency (user_id);
CREATE INDEX IF NOT EXISTS idx_user_knowledge_proficiency_area ON public.user_knowledge_proficiency (knowledge_area_id);
CREATE INDEX IF NOT EXISTS idx_personalized_learning_paths_user ON public.personalized_learning_paths (user_id);
CREATE INDEX IF NOT EXISTS idx_personalized_modules_path ON public.personalized_modules (personalized_path_id);
CREATE INDEX IF NOT EXISTS idx_personalized_sprints_module ON public.personalized_sprints (personalized_module_id);
CREATE INDEX IF NOT EXISTS idx_personalized_quiz_questions_sprint ON public.personalized_quiz_questions (personalized_sprint_id); 